var BSON, Db, assert, jsonDict, jsonFunc, log, mongo, mongoUri, util;
mongo = require('mongodb');
Db = mongo.Db;
BSON = mongo.BSONPure;
mongoUri = 'mongodb://localhost/mongo_test';
assert = require('power-assert');
util = require('util');
log = function (obj) {
    return console.log(util.inspect(obj, false, null));
};
jsonFunc = function () {
    return {
        name: 'jon',
        age: 20
    };
};
jsonDict = {
    name: 'jon',
    age: 20
};
describe('insert Tests', function () {
    var coll, db, json;
    db = null;
    coll = null;
    json = null;
    before(function (done) {
        return Db.connect(mongoUri, function (err, DB) {
            db = DB;
            db.dropCollection('testCollection');
            db.close();
            return done();
        });
    });
    beforeEach(function (done) {
        return Db.connect(mongoUri, function (err, DB) {
            db = DB;
            return db.collection('testCollection', function (err, collection) {
                coll = collection;
                return done();
            });
        });
    });
    afterEach(function (done) {
        return db.dropCollection('testCollection', function (err, result) {
            db.close();
            return done();
        });
    });
    return describe('insert', function () {
        it('insert\u306E\u7B2C\u4E00\u5F15\u6570\u306Bobject\u3092\u6E21\u3059\u3068insert\u3067\u304D\u308B\u3002\u518D\u5EA6\u540C\u3058object\u3092\u6E21\u3057\u3066\u3082insert\u3067\u304D\u308B', function (done) {
            return coll.insert({ name: 'taro' }, function (err, result) {
                assert(assert._expr(assert._capt(assert._capt(err, 'arguments/0/left') === null, 'arguments/0'), {
                    content: 'assert(err === null)',
                    filepath: 'test/insertTest.js',
                    line: 68
                }));
                return coll.insert({ name: 'taro' }, function (err, result) {
                    assert(assert._expr(assert._capt(assert._capt(err, 'arguments/0/left') === null, 'arguments/0'), {
                        content: 'assert(err === null)',
                        filepath: 'test/insertTest.js',
                        line: 72
                    }));
                    return coll.find().toArray(function (err, items) {
                        assert(assert._expr(assert._capt(assert._capt(assert._capt(items, 'arguments/0/left/object').length, 'arguments/0/left') === 2, 'arguments/0'), {
                            content: 'assert(items.length === 2)',
                            filepath: 'test/insertTest.js',
                            line: 74
                        }));
                        return done();
                    });
                });
            });
        });
        it('object\u3092\u5909\u6570\u5316\u3057\u3066insert\u3059\u308B\u30682\u56DE\u3081\u3067\u5931\u6557\u3059\u308B', function (done) {
            json = { name: 'taro' };
            return coll.insert(json, function (err, result) {
                assert(assert._expr(assert._capt(assert._capt(err, 'arguments/0/left') === null, 'arguments/0'), {
                    content: 'assert(err === null)',
                    filepath: 'test/insertTest.js',
                    line: 85
                }));
                coll.insert(json, function (err, result) {
                    return assert(assert._expr(assert._capt(err, 'arguments/0'), {
                        content: 'assert(err)',
                        filepath: 'test/insertTest.js',
                        line: 87
                    }));
                });
                return done();
            });
        });
        it('\u5909\u6570\u5316\u3057\u305Fjson\u306B\u306Finsert\u3057\u305F\u30BF\u30A4\u30DF\u30F3\u30B0\u3067_id\u304C\u4ED8\u4E0E\u3055\u308C\u3066\u3044\u308B', function (done) {
            json = { name: 'taro' };
            assert(assert._expr(assert._capt(assert._capt(assert._capt(json, 'arguments/0/left/object')._id, 'arguments/0/left') === assert._capt(void 0, 'arguments/0/right'), 'arguments/0'), {
                content: 'assert(json._id === void 0)',
                filepath: 'test/insertTest.js',
                line: 96
            }));
            return coll.insert(json, function (err, result) {
                assert(assert._expr(assert._capt(assert._capt(json, 'arguments/0/object')._id, 'arguments/0'), {
                    content: 'assert(json._id)',
                    filepath: 'test/insertTest.js',
                    line: 98
                }));
                return done();
            });
        });
        it('json\u3092\u30B0\u30ED\u30FC\u30D0\u30EB\u5909\u6570\u304B\u3089\u53D6\u5F97\u3057\u305F\u5834\u5408\u3082_id\u306F\u4ED8\u4E0E\u3055\u308C\u308B(\u66F8\u304D\u63DB\u308F\u308B)', function (done) {
            json = jsonDict;
            assert(assert._expr(assert._capt(assert._capt(assert._capt(json, 'arguments/0/left/object')._id, 'arguments/0/left') === assert._capt(void 0, 'arguments/0/right'), 'arguments/0'), {
                content: 'assert(json._id === void 0)',
                filepath: 'test/insertTest.js',
                line: 104
            }));
            return coll.insert(json, function (err, result) {
                var json2;
                assert(assert._expr(assert._capt(assert._capt(json, 'arguments/0/object')._id, 'arguments/0'), {
                    content: 'assert(json._id)',
                    filepath: 'test/insertTest.js',
                    line: 107
                }));
                json2 = jsonDict;
                assert(assert._expr(assert._capt(assert._capt(json2, 'arguments/0/left') === assert._capt(json, 'arguments/0/right'), 'arguments/0'), {
                    content: 'assert(json2 === json)',
                    filepath: 'test/insertTest.js',
                    line: 109
                }));
                return done();
            });
        });
        return it('json\u3092\u95A2\u6570\u304B\u3089\u53D6\u5F97\u3057\u305F\u5834\u5408\u3001_id\u306F\u4ED8\u4E0E\u3055\u308C\u306A\u3044', function (done) {
            json = jsonFunc();
            assert(assert._expr(assert._capt(assert._capt(assert._capt(json, 'arguments/0/left/object')._id, 'arguments/0/left') === assert._capt(void 0, 'arguments/0/right'), 'arguments/0'), {
                content: 'assert(json._id === void 0)',
                filepath: 'test/insertTest.js',
                line: 115
            }));
            return coll.insert(json, function (err, result) {
                var json2;
                assert(assert._expr(assert._capt(assert._capt(json, 'arguments/0/object')._id, 'arguments/0'), {
                    content: 'assert(json._id)',
                    filepath: 'test/insertTest.js',
                    line: 118
                }));
                json2 = jsonFunc();
                assert(assert._expr(assert._capt(assert._capt(assert._capt(json2, 'arguments/0/left/object')._id, 'arguments/0/left') === assert._capt(void 0, 'arguments/0/right'), 'arguments/0'), {
                    content: 'assert(json2._id === void 0)',
                    filepath: 'test/insertTest.js',
                    line: 120
                }));
                return done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
